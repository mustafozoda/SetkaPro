generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  WORKER
  DRIVER
  COOK
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  address   String
  password  String
  role      Role
  createdAt DateTime @default(now())

  productions  Production[]
  invoicesSold Invoice[]     @relation("SellerInvoices")
  salaries     Salary[]
  machineLogs  MachineLog[]
  activityLogs ActivityLog[]
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  invoices Invoice[]
}

model MeshType {
  id             String   @id @default(uuid())
  type           String // e.g. "10x10"
  form           String? // optional, like "roll" or "sheet"
  wireType       String // e.g. "3mm"
  weightPerPiece Float // kg per mesh piece
  priceForClient Float
  priceForWorker Float
  currentStock   Int      @default(0) // dynamic stock tracking
  stockThreshold Int      @default(0) // alert if low
  createdAt      DateTime @default(now())

  productions Production[]
  invoices    Invoice[]
}

model Wire {
  id         String   @id @default(uuid())
  wireType   String // e.g. "3mm"
  quantityKg Float
  usedKg     Float    @default(0)
  createdAt  DateTime @default(now())
}

model Production {
  id         String   @id @default(uuid())
  userId     String
  meshTypeId String
  quantity   Int
  startedAt  DateTime
  finishedAt DateTime
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  meshType MeshType @relation(fields: [meshTypeId], references: [id])
}

model Invoice {
  id           String   @id @default(uuid())
  clientId     String
  sellerId     String
  meshTypeId   String
  quantity     Int
  pricePerUnit Float
  total        Float
  amountPaid   Float    @default(0)
  isPaid       Boolean  @default(false)
  dueAmount    Float    @default(0)
  createdAt    DateTime @default(now())

  client     Client       @relation(fields: [clientId], references: [id])
  seller     User         @relation("SellerInvoices", fields: [sellerId], references: [id])
  meshType   MeshType     @relation(fields: [meshTypeId], references: [id])
  PaymentLog PaymentLog[]
}

model Salary {
  id        String   @id @default(uuid())
  userId    String
  month     String // e.g. "2025-04"
  amount    Float
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Finance {
  id          String   @id @default(uuid())
  type        String // "income", "expense"
  category    String // "wire", "salary", "sale", etc.
  amount      Float
  description String?
  createdAt   DateTime @default(now())
}

model Machine {
  id          String    @id @default(uuid())
  name        String
  description String?
  inUse       Boolean   @default(false)
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())

  logs MachineLog[]
}

model MachineLog {
  id        String    @id @default(uuid())
  machineId String
  userId    String?
  startedAt DateTime
  endedAt   DateTime?

  machine Machine @relation(fields: [machineId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  module    String // e.g. "Invoice", "Mesh", etc.
  details   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Localization {
  id        String   @id @default(uuid())
  key       String
  en        String
  ru        String
  createdAt DateTime @default(now())
}

model PaymentLog {
  id        String   @id @default(uuid())
  invoiceId String
  amount    Float
  paidAt    DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}
